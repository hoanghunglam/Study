/*
 * An implementation of Prim algorithm to find the minimum spanning tree of a graph. This implementation takes O(n^2) time.
 *
 * Warning: this implementation is not fully tested, use at your own risk.
 * See http://www.giaithuatlaptrinh.com/?p=1175 for more details.
 *
 *  Created on: May 30, 2016
 *  Author: Hung Le
 */   
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#define INFTY 100000000
#define TRUE 1
#define FALSE 0

// we represent a graph by a weighted matrix
int **W;
int n;		// the number of vertices of the graph
int m;		// the number of edges of the graph

void read();
int *Prim();
int find_smallest_vertex(int *d, int* inT);

int main(){
	read();
	int *M = Prim();
	printf("Edges of the MST:\n");
	int i = 0;
	int cost = 0;
	for(; i < n; i++){
		if(M[i] != -1) {
			printf("(%d,%d,%d)\n", i, M[i], W[i][M[i]]);
			cost += W[i][M[i]];
		}
	}
	printf("the cost of the MST: %d\n", cost);
}

int *Prim(){
	int u = 0;
	int *inT = (int *)malloc(n*sizeof(int)); 	// this array marks whether a vertex is in the currently built tree or not
	memset(inT, FALSE, n*sizeof(int));
	inT[u] = TRUE;
	int *M = (int *)malloc(n*sizeof(int));
	memset(M,-1, n*sizeof(int));		// set every elements of M[] to -1;
	int *d = (int *)malloc(n*sizeof(int));
	int x = 0;
	for(; x < n; x++) d[x] = INFTY;// set every elements of d[] to infinity;
	for(x = 0; x < n; x++){
		if (W[u][x] > 0) {
			d[x] = W[u][x];
			M[x] = u;
		}
	}
	int j = 0;
	while(j < n-1){
		u = find_smallest_vertex(d, inT);
		for(x = 0;  x < n ; x++){
			if(W[x][u]> 0 && W[x][u] < d[x] && inT[x] == FALSE){
				d[x] = W[u][x];
				M[x] = u;
			}
		}
		inT[u] = TRUE;
		j++;	// the number of vertices currently in the spanning tree
	}
	return M;
}

int find_smallest_vertex(int *d, int *inT){
	int min  = INFTY;
	int u = -1;
	int v = 0;
	for(; v < n; v++) {
		if (d[v] < min && inT[v] == FALSE){
			min = d[v];
			u = v;
		}
	}
	return u;
}

void read(){
	n = 6;
	m = 10;
	W = (int **)malloc(n*sizeof(int *));
	int i = 0;
	for(; i < n; i++) {
		W[i] = (int *)malloc(n*sizeof(int));
		memset(W[i], 0, n*sizeof(int));
	}
	W[0][1] = 1;		// add edge a-b of weight 1
	W[1][0] = W[0][1];	
	W[1][2] = 1;		// add edge b-c of weight 1
	W[2][1] = W[1][2];
	W[0][2] = 2;		// add edge a-c of weight 2
	W[2][0] = W[0][2];
	W[1][3] = 4;		// add edge b-d of weight 4
	W[3][1] = W[1][3];
	W[1][4] = 8;		// add edge b-e of weight 8
	W[4][1] = W[1][4];
	W[2][3] = 3;		// add edge c-d of weight 3
	W[3][2] = W[2][3];
	W[2][5] = 9;		// add edge c-f of weight 9
	W[5][2] = W[2][5];
	W[3][4] = 6;		// add edge d-e of weight 6
	W[4][3] = W[3][4];
	W[3][5] = 7;		// add edge d-f of weight 7
	W[5][3] = W[3][5];
	W[4][5] = 2;		// add edge e-f of weight 2
	W[5][4] = W[4][5];
}
