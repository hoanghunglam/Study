/*
 * An implementation of Prim algorithm to find the minimum spanning tree of a graph. We combine Prim with Heap to achieve O((m+n) \log n) time.
 *
 * Warning: this implementation is not fully tested, use at your own risk.
 * See http://www.giaithuatlaptrinh.com/?p=1175 for more details.
 *
 *  Created on: May 30, 2016
 *  Author: Hung Le
 */   
 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#define INFTY 100000000
#define TRUE 1
#define FALSE 0

// we use linked lists to represent adjacency lists
// each arc u->v with weight w(u->v) is represented by a node with data field v and weight w in the adacency list of u

typedef struct vlist{
	int v;		// the head of the directed edge
	int w;		// the original weight of the directed edge
	int Delta;	// the modified weight using potential
	struct vlist *next;
}vlist;

vlist **G;	// G[i] is the adjacency list of vertex i
int n;		// the number of vertices of the graph
int m;		// the number of edges of the graph

void read();
void add_edge(int u, int v, int w);
int *Prim();

void decrease_key(int u, int K);
int extract_min();
void build_heap(int n, int u);

int main(){
	read();
	int *M = Prim();
	printf("Edges of the MST:\n");
	int i = 0;
	for(; i < n; i++){
		if(M[i] != -1) {
			printf("(%d,%d)\n", i, M[i]);
		}
	}
}

int *d;				// the distance array
int *Prim(){
	int u = 0;
	int *inT = (int *)malloc(n*sizeof(int)); 	// this array marks whether a vertex is in the currently built tree or not
	memset(inT, FALSE, n*sizeof(int));
	inT[u] = TRUE;
	int *M = (int *)malloc(n*sizeof(int));
	memset(M,-1, n*sizeof(int));		// set every elements of M[] to -1;
	d = (int *)malloc(n*sizeof(int));
	int x = 0;
	for(; x < n; x++) d[x] = INFTY;// set every elements of d[] to infinity;
	vlist *runner;
	runner = G[u];
	while(runner != NULL){	// iterate through neighbors of u
		x = runner->v;
		d[x] = runner->w;
		M[x] = u;
		runner = runner->next;
	}
	build_heap(n, u);
	int j = 0;
	while(j < n-1){
		u = extract_min();
		runner = G[u];
		while(runner != NULL){	// iterate through neighbors of u
			x = runner->v;
			if(runner->w < d[x] && inT[x] == FALSE){	
				d[x]= runner->w;
				M[x] = u;
				decrease_key(x,d[x]);
			}
			runner = runner->next;
		}
		inT[u] = TRUE;
		j++;	// the number of vertices currently in the spanning tree
	}
	return M;
}


void read(){
	n = 6;
	m = 10;
	G = (vlist **)malloc(n*sizeof(vlist*));
	int i = 0;
	for(; i < n+1; i++)G[i] = NULL;
	add_edge(0,1,1);	// add edge a-b of weight 1
	add_edge(1,2,1);	// add edge b-c of weight 1
	add_edge(0,2,2);	// add edge a-c of weight 2
	add_edge(1,3,4);	// add edge b-d of weight 4
	add_edge(1,4,8);	// add edge b-e of weight 8
	add_edge(2,3,3);	// add edge c-d of weight 3
	add_edge(2,5,9);	// add edge c-f of weight 9
	add_edge(3,4,6);	// add edge d-e of weight 6
	add_edge(3,5,7);	// add edge d-f of weight 7
	add_edge(4,5,2);	// add edge e-f of weight 2

}

//	add an edge u-v with weight w
void add_edge(int u, int v, int w){
	// append v to the head of the adjacency list of u
	vlist* vnodev = (vlist *)malloc(sizeof(vlist));
	vnodev->v = v;
	vnodev->w = w;
	vnodev->next = G[u];
	G[u] = vnodev;

	// append u to the head of the adjacency list of v
	vlist* vnodeu = (vlist *)malloc(sizeof(vlist));
	vnodeu->v = u;
	vnodeu->w = w;
	vnodeu->next = G[v];
	G[v] = vnodeu;
}


///////////////////////////////////////////////////////////////////////
///
///		BINARY HEAP IMPLEMENTATION		
///
//////////////////////////////////////////////////////////////////////


// interfaces of the binary heap
int *H; 	// the Heap array
int hsize = 0; 	// the number of elements in the current Heap
int *pos;	// the array marks position of each vertex in the Heap array

//void insert(int x);
void up_heapify(int u);
int parent(int u);
void print_heap();
void down_heapify(int u);
// end interfaces of the binray heap


void up_heapify(int u){
	int v = parent(u);
	if(v != -1 && d[H[u]] < d[H[v]]){ // u is not the root of the heap
		int tmp = H[u];
		H[u] = H[v];
		pos[H[v]] = u;		// update the position of node H[v] in the Heap
		H[v] = tmp;
		pos[tmp] = v;		// update the position of node tmp in the Heap
		up_heapify(v);
	}
}

// Note that array in C is indexed from 0 
// Two children of a node u is 2u+1 and 2u+2, the smaller one is the left child

int parent(int u){
	return ((u&1)==0 ? ((u-2)>> 1) : (u-1) >> 1);
}



void print_heap(){
	int i = 0;
	for(; i < hsize; i++){
		printf("%d ", H[i]);
	}
	printf("\n");
}


void decrease_key(int u, int k){
	d[u] = k;
	up_heapify(pos[u]);
}

int extract_min(){
	int tmp  = H[0];
	H[0] = H[hsize-1];
	pos[H[0]] = 0;
	hsize--;
	down_heapify(0);
	return tmp;
}

void down_heapify(int u){
	int m = 2*u+1;
	if(m < hsize){	// u is not a leaf of the heap
		if(2*u+2 < hsize && d[H[m]] > d[H[2*u+2]]){
			m = 2*u+2;		
		}
		if(d[H[u]] > d[H[m]]){
			int tmp = H[u];
			H[u] = H[m];
			pos[H[m]] = u;	// update position of node H[m] in the Heap
			H[m] = tmp;
			pos[tmp] = m;	// update the position of node tmp in the Heap
			down_heapify(m);		
		}
	}
}

// Build the heap from an array in O(n) time
// The element u is not in the heap 
void build_heap(int n, int u){
	hsize = n-1;
	H = (int *)malloc(n*sizeof(int));
	pos = (int *)malloc(n*sizeof(int));
	memset(H,-1,hsize*sizeof(int));		// clear the heap
	memset(pos, -1, hsize*sizeof(int));	// clear the post array
	int i = 0;
	for(; i < u; i++) {
		H[i] = i;
		pos[i] = i;
	}

	for(i = i=u+1; i < n; i++){
		H[i-1]=i;
		pos[i] = i-1;
	}
	for(i = hsize-1; i >=0; i--){
		down_heapify(i);
	}
}